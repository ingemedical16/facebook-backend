openapi: 3.0.0
info:
  title: Chat API
  description: API for managing user-to-user and group chats, including sending messages and managing group members.
  version: 1.0.0
servers:
- url: http://localhost:5000/api
paths:
  /chats/private:
    post:
      summary: Create a private chat
      description: Create a private chat between the authenticated user and another user.
      tags:
      - Chats
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                recipientId:
                  type: string
                  description: The ID of the recipient user.
              required:
              - recipientId
              example:
                recipientId: "64bfc1d4a7e2c3e5b1f2d7e9"
      responses:
        200:
          description: Private chat already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        201:
          description: Private chat created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        400:
          description: Recipient ID is required.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Recipient not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /chats/{chatId}:
    get:
      summary: Get chat details
      description: Retrieve the details of a specific chat, including members and messages.
      tags:
      - Chats
      parameters:
      - name: chatId
        in: path
        required: true
        description: The ID of the chat.
        schema:
          type: string
      responses:
        200:
          description: Chat details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatDetailsResponse'
        404:
          description: Chat not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /chats/{chatId}/messages:
    post:
      summary: Send a message
      description: Send a message to a chat.
      tags:
      - Chats
      parameters:
      - name: chatId
        in: path
        required: true
        description: The ID of the chat.
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  description: The content of the message.
              required:
              - content
              example:
                content: "Hello, how are you?"
      responses:
        200:
          description: Message sent successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        400:
          description: Message content is required.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Chat not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: User is not a member of this chat.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    SuccessResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        code:
          type: string
          example: "MESSAGE_SENT"
        message:
          type: string
          example: "Message sent successfully."
        data:
          type: object
          nullable: true

    ErrorResponse:
      type: object
      properties:
        status:
          type: string
          example: "error"
        code:
          type: string
          example: "CHAT_NOT_FOUND"
        message:
          type: string
          example: "The specified chat does not exist."

    ChatDetailsResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        code:
          type: string
          example: "CHAT_DETAILS_RETRIEVED"
        message:
          type: string
          example: "Chat details retrieved successfully."
        data:
          type: object
          properties:
            chatId:
              type: string
              example: "64bfc1d4a7e2c3e5b1f2d7e9"
            members:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                    example: "64bfc1d4a7e2c3e5b1f2d7e9"
                  username:
                    type: string
                    example: "john_doe"
            messages:
              type: array
              items:
                type: object
                properties:
                  senderId:
                    type: string
                    example: "64bfc1d4a7e2c3e5b1f2d7e9"
                  content:
                    type: string
                    example: "Hello!"
                  timestamp:
                    type: string
                    format: date-time
                    example: "2025-01-12T10:00:00.000Z"
